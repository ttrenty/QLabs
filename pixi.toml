[workspace]
channels = ["https://conda.modular.com/max-nightly", "conda-forge"]
name = "qlabs"
platforms = ["linux-64"]
version = "0.1.0"

[feature.cuda]
system-requirements = { cuda = "12" }
channels = ["nvidia"]

[feature.cuda.dependencies]
cuda-toolkit = "12.*" # for compute-sanitizer etc.

[dependencies]
modular = ">=25.5.0.dev2025062705,<26"
max = ">=25.5.0.dev2025062405,<26"

[environments]
cuda = { features = ["cuda"] }
default = { features = ["cuda"] }

[tasks.clear] # Clear the terminal
cmd = "clear"

[tasks.lint] # Check code formatting using an external script
cmd = ".github/scripts/check-format.sh"

[tasks.format_examples] # Format the examples code
cmd = "pixi run mojo format ./examples"
inputs = ["./examples/**/*.mojo"]

[tasks.format_src] # Format the src code
cmd = "pixi run mojo format ./src"
inputs = ["./src/**/*.mojo"]

[tasks.format_tests] # Format the tests code
cmd = "pixi run mojo format ./tests"
inputs = ["./tests/**/*.mojo"]

[tasks.format_benchmarks] # Format the tests code
cmd = "pixi run mojo format ./benchmarks"
inputs = ["./benchmarks/**/*.mojo"]

[tasks.create_build_dir]
cmd = "mkdir -p build/"

[tasks.build] # Compile any mojo file
args = [
    { "arg" = "full_file_path", "default" = "examples/main.mojo" },
    { "arg" = "executable_name", "default" = "main" },
    { "arg" = "additional_input", "default" = "pixi.toml" },        # place holder to prevent freeze
]
inputs = ["./src/**/*.mojo", "{{ full_file_path }}", "{{ additional_input }}"]
outputs = ["build/{{ executable_name }}"]
cmd = "pixi run mojo build {{ full_file_path }} -o {{ executable_name }} && cp {{ executable_name }} build/{{ executable_name }} && rm {{ executable_name }}"
depends-on = ["create_build_dir"]

[tasks.package] # Compile the package
cmd = "mkdir -p build/ && pixi run mojo package src -o qlabs.mojopkg && cp qlabs.mojopkg build/ && rm qlabs.mojopkg"
inputs = ["./src/**/*.mojo"]
outputs = ["build/qlabs.mojopkg"]
depends-on = ["create_build_dir", "format_src"]

[tasks.clean] # Clean the package files and Build directory
cmd = "rm build/* && rmdir build/ && rm examples/qlabs.mojopkg && rm tests/qlabs.mojopkg && rm benchmarks/qlabs.mojopkg || true"

[tasks.install] # Install the package in the necessary directories
cmd = "cp build/qlabs.mojopkg examples/qlabs.mojopkg && cp build/qlabs.mojopkg tests/qlabs.mojopkg && cp build/qlabs.mojopkg benchmarks/qlabs.mojopkg"
inputs = ["build/qlabs.mojopkg"]
outputs = ["examples/qlabs.mojopkg", "tests/qlabs.mojopkg"]
depends-on = ["package"]

[tasks.main]
cmd = "./build/main"
depends-on = [
    "install",
    "format_examples",
    { "task" = "build", "args" = [
        "examples/main.mojo",
        "main",
        "./examples/**/*.mojo",
    ] },
]

[tasks.test] # Unitary Tests (uses the mojo testing tool)
cmd = "pixi run mojo test tests"
depends-on = ["install", "format_tests"]

[tasks.bench] # Run all benchmarks
cmd = "./build/all_benchmarks"
depends-on = [
    "install",
    "format_benchmarks",
    { "task" = "build", "args" = [
        "benchmarks/all_benchmarks.mojo",
        "all_benchmarks",
        "./benchmarks/**/*.mojo",
    ] },
]


# # Benches
# bench_decimal = "clear && pixi run package && cd benches/decimal && pixi run mojo -I ../ bench.mojo && cd ../.. && pixi run clean"
# bench_bigint = "clear && pixi run package && cd benches/bigint && pixi run mojo -I ../ bench.mojo && cd ../.. && pixi run clean"
# bench_biguint = "clear && pixi run package && cd benches/biguint && pixi run mojo -I ../ bench.mojo && cd ../.. && pixi run clean"
# bench_bigdecimal = "clear && pixi run package && cd benches/bigdecimal && pixi run mojo -I ../ bench.mojo && cd ../.. && pixi run clean"
# bench_dec = "pixi run bench_decimal"
# bench_bint = "pixi run bench_bigint"
# bench_buint = "pixi run bench_biguint"
# bench_bdec = "pixi run bench_bigdecimal"


[tasks]

tests = [{ task = "test" }]
p = [{ task = "clear" }, { task = "package" }]
m = [{ task = "clear" }, { task = "main" }]
# t = "clear && pixi run package && pixi run mojo test tests --filter"
